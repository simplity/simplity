<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testRun
	xmlns="http://www.simplity.org/schema"
	testName="test"
	moduleName="self"
>
	<testCases>
		<testCase
			testCaseName="test"
			serviceName="self.gigo"
			description="test testCase component. This tests only for positive. Any change in this should become a negative test"
			testForFailure="true"
		>
			<!-- feature 1. JSON can be specified for input. Other specifications 
				will alter this JSON -->
			<inputJson><![CDATA[{
		"json":{"a":"aa"}, 
		"a":"old", 
		"emptyList":[], 
		"emptyObject":{},
		"_messages":[{"messageType":"error", "text":"A test error message"}]
		} ]]></inputJson>
			<!-- feature 2. input data can be specified using input Fields. -->
			<inputFields>
				<!-- feature 2.1 Field value can be set. -->
				<inputField
					fieldSelector="a1"
					fieldValue="1" />
				<!-- feature 2.2 field specification replaces existing value in JSON -->
				<inputField
					fieldSelector="a"
					fieldValue="a" />
				<!-- feature 2.3 field can get value from context. fieldInCtx is set 
					by the tester -->
				<inputField
					fieldSelector="ctx"
					fieldValue="$fieldInCtx" />
				<!-- feature 2.4 field name is actually a selector. You can set it at 
					any depth. Existing JSON is extended if required. Ensure that this value 
					is same as "a1" because of our test for feature 8. -->
				<inputField
					fieldSelector="b.a"
					fieldValue="1" />
				<!-- selector that requires an array to be created -->
				<inputField
					fieldSelector="c.1"
					fieldValue="c1" />
				<!-- fairly complex selector -->
				<inputField
					fieldSelector="c.2.d.e.f"
					fieldValue="c2def" />
			</inputFields>
			<!-- feature 3. Input can be specified with inputItem -->
			<inputItems>
				<!-- feature 3.1 item selector sets the parent object for fields inside 
					that -->
				<inputItem itemSelector="topItem.level1Item">
					<inputFields>
						<inputField
							fieldSelector="level2Att"
							fieldValue="item1" />
						<inputField
							fieldSelector="level2.att"
							fieldValue="item2" />
					</inputFields>
				</inputItem>
			</inputItems>
			<!-- We have used a GIGO (garbage-in-garbage-out) service that will respond 
				back with the input JSON as output Hence we expect the JSON that we have 
				constructed using input specification as our output. We test different part 
				of that using different output specification. Following is the full json 
				expected -->
			<!-- {"json":{"a":"aa"}, "a":"a", "a1":"1", "b":{"a":"1"},"c":[null,"c1",{"d":{"e":{"f":"c2def"}}}], 
				"ctx":"ctx","topItem":{"level1Item":{"level2Att":"item1", "level2":{"att":"item2"}}}, 
				"_message":[{"messageType":"error", "text" : "A test error message"}], "emptyList":[], 
				"emptyObject":{}} -->

			<!-- Feature 8. fields from output can be put to testCOntext for the next 
				test case to use it -->
			<fieldsToBeAddedToContext>
				<contextField
					fieldSelector="b.a"
					nameInContext="myOutput" />
			</fieldsToBeAddedToContext>
			<!-- feature 4. JSON can be specified as expected output. We assert presence 
				of what we want. It does not imply that other data should not be there. So 
				we are testing a subset using json, leaving the rest for other ways of testing -->
			<outputJson><![CDATA[
				{"a":"a", "json":{"a":"aa"}}
 			]]></outputJson>
			<!-- feature 5. outputFields can be used for assertions -->
			<outputFields>
				<!-- Feature 5.1 specify a value to assert -->
				<outputField
					fieldSelector="a"
					fieldValue="a" />
				<!-- Feature 5.2 null implies non-existence -->
				<outputField
					fieldSelector="c.0"
					shouldBeAbsent="true" />
				<!-- Feature 5.3 not specifying any value means any value will do -->
				<outputField fieldSelector="topItem.level1Item.level2" />
				<!-- Feature 5.4 empty list is considered as not being there -->
				<outputField
					fieldSelector="emptyList"
					shouldBeAbsent="true" />
				<!-- Feature 5.5 empty object, however, is considered to be a value. -->
				<outputField fieldSelector="emptyObject" />
				<!-- Feature 5.5 empty object, however, is considered to be a value. -->
				<outputField fieldSelector="emptyObject" />
				<!-- Feature 8. value from an output can be added to test context for 
					subsequent use (we know that the context is common, hence we are testing 
					in the same test case. ideally we should be testing it in the next case -->
				<outputField
					fieldSelector="a1"
					fieldValue="$myOutput" />
			</outputFields>
			<outputLists>
				<!-- Feature 5.6 min and max rows can be specified for an array -->
				<outputList
					listSelector="c"
					maxRows="3"
					minRows="3" />
			</outputLists>
			<outputItems>
				<outputItem itemSelector="c.2.d.e">
					<outputFields>
						<outputField
							fieldSelector="f"
							fieldValue="c2def" />
						<outputField
							fieldSelector="q"
							shouldBeAbsent="true" />
					</outputFields>
				</outputItem>
			</outputItems>

		</testCase>
	</testCases>
</testRun>
